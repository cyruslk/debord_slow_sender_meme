{"ast":null,"code":"var _jsxFileName = \"/Users/cyrus/Documents/Code/01. Code/debord_slow_sender_meme/client_side/src/App.js\";\nimport React, { Component } from 'react';\nimport axios from \"axios\";\nimport { Stitch, AnonymousCredential, RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.retrieveDataFromDBOnLoad = () => {\n      // Anonymously log in and display comments on load\n      this.client.auth.loginWithCredential(new AnonymousCredential()).then(this.retrieveDataFromDB).catch(console.error);\n    };\n\n    this.retrieveDataFromDB = () => {\n      // query the remote DB and update the component state\n      this.db.collection(\"ford_twitter\").find({}, {\n        limit: 1000\n      }).asArray().then(dbContent => {\n        this.setState({\n          dbContent\n        });\n      });\n    };\n\n    this.state = {\n      dbContent: null\n    };\n  }\n\n  componentDidMount() {\n    this.client = Stitch.initializeDefaultAppClient(\"debord_slow_sender-eabsu\");\n    const mongodb = this.client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\");\n    this.db = mongodb.db(\"franklin-ford-database\");\n    this.retrieveDataFromDBOnLoad();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, \"0\");\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/cyrus/Documents/Code/01. Code/debord_slow_sender_meme/client_side/src/App.js"],"names":["React","Component","axios","Stitch","AnonymousCredential","RemoteMongoClient","App","constructor","retrieveDataFromDBOnLoad","client","auth","loginWithCredential","then","retrieveDataFromDB","catch","console","error","db","collection","find","limit","asArray","dbContent","setState","state","componentDidMount","initializeDefaultAppClient","mongodb","getServiceClient","factory","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,SACEC,MADF,EAEEC,mBAFF,EAGEC,iBAHF,QAIO,4BAJP;;AAQA,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AAC1BM,EAAAA,WAAW,GAAE;AACX;;AADW,SAiBbC,wBAjBa,GAiBc,MAAM;AACjC;AACE,WAAKC,MAAL,CAAYC,IAAZ,CACGC,mBADH,CACuB,IAAIP,mBAAJ,EADvB,EAEGQ,IAFH,CAEQ,KAAKC,kBAFb,EAGGC,KAHH,CAGSC,OAAO,CAACC,KAHjB;AAID,KAvBY;;AAAA,SAyBbH,kBAzBa,GAyBQ,MAAM;AACxB;AACA,WAAKI,EAAL,CACGC,UADH,CACc,cADd,EAEGC,IAFH,CAEQ,EAFR,EAEY;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAFZ,EAGGC,OAHH,GAIGT,IAJH,CAIQU,SAAS,IAAI;AACjB,aAAKC,QAAL,CAAc;AAACD,UAAAA;AAAD,SAAd;AACD,OANH;AAOA,KAlCU;;AAEX,SAAKE,KAAL,GAAa;AACXF,MAAAA,SAAS,EAAE;AADA,KAAb;AAGD;;AAEDG,EAAAA,iBAAiB,GAAE;AACjB,SAAKhB,MAAL,GAAcN,MAAM,CAACuB,0BAAP,CAAkC,0BAAlC,CAAd;AACA,UAAMC,OAAO,GAAG,KAAKlB,MAAL,CAAYmB,gBAAZ,CACdvB,iBAAiB,CAACwB,OADJ,EAEd,eAFc,CAAhB;AAIA,SAAKZ,EAAL,GAAUU,OAAO,CAACV,EAAR,CAAW,wBAAX,CAAV;AACA,SAAKT,wBAAL;AACD;;AAwBDsB,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAKD;;AA9CyB;;AAgD5B,eAAexB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\n\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from \"mongodb-stitch-browser-sdk\";\n\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      dbContent: null\n    };\n  }\n\n  componentDidMount(){\n    this.client = Stitch.initializeDefaultAppClient(\"debord_slow_sender-eabsu\");\n    const mongodb = this.client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    );\n    this.db = mongodb.db(\"franklin-ford-database\");\n    this.retrieveDataFromDBOnLoad()\n  }\n\n  retrieveDataFromDBOnLoad = () => {\n  // Anonymously log in and display comments on load\n    this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then(this.retrieveDataFromDB)\n      .catch(console.error);\n  };\n\n  retrieveDataFromDB = () => {\n     // query the remote DB and update the component state\n     this.db\n       .collection(\"ford_twitter\")\n       .find({}, { limit: 1000 })\n       .asArray()\n       .then(dbContent => {\n         this.setState({dbContent});\n       });\n    }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        0\n      </div>\n    );\n  }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}