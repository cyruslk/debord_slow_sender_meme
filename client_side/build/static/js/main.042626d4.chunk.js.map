{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","retrieveDataFromDBOnLoad","client","auth","loginWithCredential","AnonymousCredential","then","retrieveDataFromDB","catch","console","error","db","collection","find","asArray","dbContent","setState","displayMeme","state","map","ele","index","key","className","word","src","imageLink","translatedPrediction","this","Stitch","initializeDefaultAppClient","mongodb","getServiceClient","RemoteMongoClient","factory","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8RA4EeA,E,kDA9Db,aAAc,IAAD,8BACX,gBAgBFC,yBAA2B,WACzB,EAAKC,OAAOC,KACTC,oBAAoB,IAAIC,KACxBC,KAAK,EAAKC,oBACVC,MAAMC,QAAQC,QArBN,EAwBbH,mBAAqB,WAClB,EAAKI,GACFC,WAAW,gBACXC,OACAC,UACAR,MAAK,SAAAS,GACJ,EAAKC,SAAS,CAACD,kBA9BT,EAkCbE,YAAc,WAEZ,OADkB,EAAKC,MAAMH,UAIH,EAAKG,MAAMH,UACpCI,KAAI,SAACC,EAAKC,GACT,OACE,yBAAKC,IAAKD,EAAOE,UAAU,SACzB,4BAAKH,EAAII,MACT,yBAAKC,IAAKL,EAAIM,YACd,4BAAKN,EAAIO,0BARN,MAnCT,EAAKT,MAAQ,CACXH,UAAW,MAHF,E,gEAQXa,KAAK1B,OAAS2B,IAAOC,2BAA2B,4BAChD,IAAMC,EAAUH,KAAK1B,OAAO8B,iBAC1BC,IAAkBC,QAClB,iBAEFN,KAAKjB,GAAKoB,EAAQpB,GAAG,sBACrBiB,KAAK3B,6B,+BAyCL,OADAQ,QAAQ0B,IAAIP,KAAKV,OAEf,yBAAKK,UAAU,OACZK,KAAKX,mB,GA1DImB,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEd3C,OAAM,SAAAE,GACLD,QAAQC,MAAMA,EAAM0C,c","file":"static/js/main.042626d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\n\n\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from \"mongodb-stitch-browser-sdk\";\n\n\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      dbContent: null\n    };\n  }\n\n  componentDidMount(){\n    this.client = Stitch.initializeDefaultAppClient(\"debord_slow_sender-eabsu\");\n    const mongodb = this.client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    );\n    this.db = mongodb.db(\"debord_slow_sender\");\n    this.retrieveDataFromDBOnLoad()\n  }\n\n  retrieveDataFromDBOnLoad = () => {\n    this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then(this.retrieveDataFromDB)\n      .catch(console.error);\n  };\n\n  retrieveDataFromDB = () => {\n     this.db\n       .collection(\"meme_entries\")\n       .find()\n       .asArray()\n       .then(dbContent => {\n         this.setState({dbContent});\n       });\n    }\n\n  displayMeme = () => {\n    const dbContent = this.state.dbContent;\n    if(!dbContent){\n      return null;\n    }\n    let generateMemesFromDb = this.state.dbContent\n    .map((ele, index) => {\n      return (\n        <div key={index} className=\"memes\">\n          <h1>{ele.word}</h1>\n          <img src={ele.imageLink} />\n          <h1>{ele.translatedPrediction}</h1>\n        </div>\n      )\n    })\n    return generateMemesFromDb;\n  }\n\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"App\">\n        {this.displayMeme()}\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}